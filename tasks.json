{
    "tasks": [
        {
            "id": "26-Z1-1",
            "type": "open-data",
            "comment": "Kevin a magnety - triviální, lineární průchod pole",
            "requires": [
                "label-1d-pole"
            ],
            "title": "Kevin a magnety",
            "position": [
                -791.4863929748535,
                1085.4312210083008
            ],
            "taskReference": "26-Z1-1"
        },
        {
            "id": "26-Z1-2",
            "type": "open-data",
            "comment": "Piškvorky - detekce vítězství v piškvorkách, procházení 2D pole v různych směrech",
            "requires": [
                "26-Z4-3"
            ],
            "position": [
                -944.0588073730469,
                567.9119110107422
            ],
            "taskReference": "26-Z1-2",
            "title": "Piškvorky"
        },
        {
            "id": "26-Z1-3",
            "type": "open-data",
            "comment": "Zamilovaný dopis - triviální, procházení stringů po znacích a kontrola podmínek",
            "requires": [
                "label-retezce",
                "30-Z1-3"
            ],
            "position": [
                -385.37432861328125,
                -453.4102783203125
            ],
            "taskReference": "26-Z1-3",
            "title": "Zamilovaný dopis"
        },
        {
            "id": "26-Z1-4",
            "type": "open-data",
            "comment": "Hroch v jezeře - BFS či jiné prohledávání, počítání velikosti komponent v 2D poli, ",
            "requires": [
                "label-grafy"
            ],
            "position": [
                -1492.7423095703125,
                12.952919006347656
            ],
            "taskReference": "26-Z1-4",
            "title": "Hroch v jezeře"
        },
        {
            "id": "26-Z2-1",
            "type": "open-data",
            "comment": "Had z domina - triviální, linerání průchod pole a počítání, na kolika místech platí podmínka, vyžaduje práci se dvojicemi",
            "requires": [
                "label-1d-pole"
            ],
            "position": [
                -1241.3483810424805,
                1104.40234375
            ],
            "taskReference": "26-Z2-1",
            "title": "Had z domina"
        },
        {
            "id": "26-Z2-2",
            "type": "open-data",
            "comment": "SADO - triviální, procházení celých čísel v intervalu a kontrola podmínky",
            "requires": [],
            "position": [
                1167.1616821289062,
                208.39923095703125
            ],
            "taskReference": "26-Z2-2",
            "title": "SADO"
        },
        {
            "id": "26-Z2-3",
            "type": "open-data",
            "comment": "Šifrovaná zpráva - práce s řetězci, hledání mapování mezi písmenky (substitučka) a validace, že jinde substitučka funguje",
            "requires": [
                "label-retezce",
                "26-Z1-3"
            ],
            "position": [
                -485.63623809814453,
                -406.0977783203125
            ],
            "taskReference": "26-Z2-3",
            "title": "Šifrovaná zpráva"
        },
        {
            "id": "26-Z2-4",
            "type": "open-data",
            "comment": "Životně důležitá úloha -  dostanu pole čísel, potřebuju v něm najít pravidelně se opakující výskyty hodnot, relativně složitá práce s poli, dvojcemi apod.",
            "requires": [
                "26-Z2-1"
            ],
            "title": "Životně důležitá úloha",
            "position": [
                -1233.616186618805,
                1166.127784729004
            ],
            "taskReference": "26-Z2-4"
        },
        {
            "id": "26-Z3-1",
            "type": "open-data",
            "comment": "Zámky labyrintu - hromada ifů, vhodné možná na code review, hledání čísla z trojice takového, že je trojice aritmetrická posloupnost",
            "requires": [],
            "position": [
                1205.6161193847656,
                327.53318786621094
            ],
            "taskReference": "26-Z3-1",
            "title": "Zámky labyrintu"
        },
        {
            "id": "26-Z3-2",
            "type": "open-data",
            "comment": "Čarodějova šifra - šifrování mřížkou, práce se stringy, rotace matice, vhodné na code review?, docela hard",
            "requires": [
                "29-Z3-2"
            ],
            "position": [
                -698.3905334472656,
                -310.5342102050781
            ],
            "taskReference": "26-Z3-2",
            "title": "Čarodějova šifra"
        },
        {
            "id": "26-Z3-3",
            "type": "open-data",
            "comment": "Hádanka - triky s dělitelností devíti a rozkladem čísel, docela hard teorie",
            "requires": [],
            "position": [
                1244.6161193847656,
                406.53318786621094
            ],
            "taskReference": "26-Z3-3",
            "title": "Hádanka"
        },
        {
            "id": "26-Z3-4",
            "type": "open-data",
            "comment": "Tvar labyrintu - nejdelší cesta ve stromě, graf",
            "requires": [
                "label-grafy-pracovni-poznamka"
            ],
            "position": [
                -1572.0391845703125,
                232.67998504638672
            ],
            "taskReference": "26-Z3-4",
            "title": "Tvar labyrintu"
        },
        {
            "id": "26-Z4-1",
            "type": "open-data",
            "comment": "Vražedná čísla- WTF, teorie čísel, hard as fuck, divný",
            "requires": [],
            "position": [
                1087.2091645675546,
                270.43162285670724
            ],
            "taskReference": "26-Z4-1",
            "title": "Vražedná čísla"
        },
        {
            "id": "26-Z4-2",
            "type": "open-data",
            "comment": "Sbírání vajíček - hledení mediánu, musí se to ale vymyslet, nejkratší cesta při chození tam a zpět",
            "requires": [],
            "position": [
                543.2475501644587,
                -786.0833304046971
            ],
            "taskReference": "26-Z4-2",
            "title": "Sbírání vajíček"
        },
        {
            "id": "26-Z4-3",
            "type": "open-data",
            "comment": "Hra Othello - link na 26-Z1-2, procházení 2D pole po různých směrech",
            "requires": [
                "label-2d-pole"
            ],
            "title": "Hra Othello",
            "position": [
                -886.0805053710938,
                524.8581848144531
            ],
            "taskReference": "26-Z4-3"
        },
        {
            "id": "26-Z4-4",
            "type": "open-data",
            "comment": "Hlídači v labyrintu - policajti hlídající na grafu, konkrétně na stromě, rekurze, technicky asi až DP",
            "requires": [
                "label-grafy-pracovni-poznamka"
            ],
            "position": [
                -1356.3235473632812,
                172.98125457763672
            ],
            "taskReference": "26-Z4-4",
            "title": "Hlídači v labyrintu"
        },
        {
            "type": "open-data",
            "id": "27-1-4",
            "taskReference": "27-1-4",
            "requires": [],
            "position": [
                2106.817985534668,
                1146.6559019088745
            ],
            "title": "Head-up display"
        },
        {
            "type": "open-data",
            "id": "27-2-5",
            "taskReference": "27-2-5",
            "requires": [],
            "position": [
                1217.155632019043,
                1124.5684385299683
            ],
            "title": "Nejdelší příkaz"
        },
        {
            "type": "open-data",
            "id": "27-3-5",
            "taskReference": "27-3-5",
            "requires": [],
            "position": [
                1110.0876388549805,
                1190.2755918502808
            ],
            "title": "Komprese obrazu"
        },
        {
            "type": "open-data",
            "id": "27-4-5",
            "taskReference": "27-4-5",
            "requires": [],
            "position": [
                2081.3400802612305,
                790.309832572937
            ],
            "title": "Večeře pro opraváře"
        },
        {
            "type": "open-data",
            "id": "27-5-3",
            "taskReference": "27-5-3",
            "requires": [],
            "position": [
                2056.503044128418,
                625.5225400924683
            ],
            "title": "Čekání na poště"
        },
        {
            "type": "open-data",
            "id": "27-Z1-1",
            "taskReference": "27-Z1-1",
            "requires": [],
            "position": [
                1056.8284225463867,
                1438.8191709518433
            ],
            "title": "Na zastávce"
        },
        {
            "type": "open-data",
            "id": "27-Z1-2",
            "taskReference": "27-Z1-2",
            "requires": [],
            "position": [
                1739.7698287963867,
                -160.9592409133911
            ],
            "title": "Kalkulačka",
            "comment": "jednoduché načtení vstupu a pak vyhodnocení"
        },
        {
            "type": "open-data",
            "id": "27-Z1-3",
            "taskReference": "27-Z1-3",
            "requires": [],
            "position": [
                1518.409294128418,
                1245.754168510437
            ],
            "title": "Slovník T9"
        },
        {
            "type": "open-data",
            "id": "27-Z1-4",
            "taskReference": "27-Z1-4",
            "requires": [],
            "position": [
                1333.111198425293,
                1194.713885307312
            ],
            "title": "Lyžař"
        },
        {
            "id": "27-Z2-1",
            "type": "open-data",
            "comment": "Závorky z cereálií - 2 průchody pole, závorky",
            "requires": [
                "26-Z1-1",
                "label-1d-pole"
            ],
            "position": [
                -729.3588676452637,
                1142.1367416381836
            ],
            "taskReference": "27-Z2-1",
            "title": "Závorky z cereálií"
        },
        {
            "type": "open-data",
            "id": "27-Z2-2",
            "taskReference": "27-Z2-2",
            "requires": [],
            "position": [
                898.155632019043,
                1242.5684385299683
            ],
            "title": "Hrnce od Horsta"
        },
        {
            "type": "open-data",
            "id": "27-Z2-3",
            "taskReference": "27-Z2-3",
            "requires": [],
            "position": [
                809.155632019043,
                1312.5684385299683
            ],
            "title": "Nápis na tričku"
        },
        {
            "type": "open-data",
            "id": "27-Z2-4",
            "taskReference": "27-Z2-4",
            "requires": [],
            "position": [
                1017.155632019043,
                1255.5684385299683
            ],
            "title": "Hořící auto"
        },
        {
            "type": "open-data",
            "id": "27-Z3-1",
            "taskReference": "27-Z3-1",
            "requires": [],
            "position": [
                489.8798141479492,
                1566.5902891159058
            ],
            "title": "Kevin nabíječ, s.r.o.",
            "comment": "chyták v posledním vstupu, jinak fakt jednoduchá"
        },
        {
            "type": "open-data",
            "id": "27-Z3-2",
            "taskReference": "27-Z3-2",
            "requires": [],
            "position": [
                1269.155632019043,
                1015.5684385299683
            ],
            "title": "Nedej vitagen"
        },
        {
            "type": "open-data",
            "id": "27-Z3-3",
            "taskReference": "27-Z3-3",
            "requires": [],
            "position": [
                -492.34237718582153,
                1427.5210752487183
            ],
            "title": "Superstromy",
            "comment": "třízení pole (info o counting sortu)"
        },
        {
            "type": "open-data",
            "id": "27-Z3-4",
            "taskReference": "27-Z3-4",
            "requires": [],
            "position": [
                1557.155632019043,
                1168.5684385299683
            ],
            "title": "Robo Rally"
        },
        {
            "type": "open-data",
            "id": "27-Z4-1",
            "taskReference": "27-Z4-1",
            "requires": [],
            "position": [
                1573.334342956543,
                -36.192124366760254
            ],
            "title": "Záhada Pražského orloje",
            "comment": "Euklidův algoritmus, potřeba vymyslet přes matematiku"
        },
        {
            "type": "open-data",
            "id": "27-Z4-2",
            "taskReference": "27-Z4-2",
            "requires": [],
            "position": [
                1028.155632019043,
                1032.5684385299683
            ],
            "title": "Unavení u oken"
        },
        {
            "type": "open-data",
            "id": "27-Z4-3",
            "taskReference": "27-Z4-3",
            "requires": [],
            "position": [
                974.155632019043,
                1158.5684385299683
            ],
            "title": "Běžkaři v Praze!"
        },
        {
            "type": "open-data",
            "id": "27-Z4-4",
            "taskReference": "27-Z4-4",
            "requires": [],
            "position": [
                1363.676628112793,
                1480.8441953659058
            ],
            "title": "Koňské skoky"
        },
        {
            "type": "open-data",
            "id": "28-1-1",
            "taskReference": "28-1-1",
            "requires": [],
            "position": [
                2578.840576171875,
                1147.3673400878906
            ],
            "title": "Jízda na biomotorce",
            "comment": "Prohledávání statového prostoru - hledání cesty v obohacneném grafu"
        },
        {
            "type": "open-data",
            "id": "28-1-5",
            "taskReference": "28-1-5",
            "requires": [],
            "position": [
                2578.8408203125,
                1227.2563781738281
            ],
            "title": "Likvidace plísně"
        },
        {
            "type": "open-data",
            "id": "28-2-5",
            "taskReference": "28-2-5",
            "requires": [],
            "position": [
                2579.950439453125,
                1310.4740905761719
            ],
            "title": "Hlídání věznice"
        },
        {
            "type": "open-data",
            "id": "28-3-5",
            "taskReference": "28-3-5",
            "requires": [],
            "position": [
                2434.5966796875,
                1312.6931457519531
            ],
            "title": "Závaží z fošen"
        },
        {
            "type": "open-data",
            "id": "28-4-4",
            "taskReference": "28-4-4",
            "requires": [],
            "position": [
                2251.517822265625,
                1337.1037902832031
            ],
            "title": "Podivuhodný obraz"
        },
        {
            "type": "open-data",
            "id": "28-5-6",
            "taskReference": "28-5-6",
            "requires": [],
            "position": [
                2071.767333984375,
                1343.7611389160156
            ],
            "title": "Sloty na iridium"
        },
        {
            "id": "28-Z1-1",
            "type": "open-data",
            "taskReference": "28-Z1-1",
            "comment": "triviální, průchod pole",
            "requires": [],
            "position": [
                -577.8423852920532,
                1150.748821258545
            ],
            "title": "Kevinův leták"
        },
        {
            "id": "28-Z1-2",
            "type": "open-data",
            "taskReference": "28-Z1-2",
            "comment": "dělitelnost",
            "requires": [],
            "position": [
                1741.000244140625,
                39.6094856262207
            ],
            "title": "Sářina hra"
        },
        {
            "id": "28-Z1-3",
            "type": "open-data",
            "taskReference": "28-Z1-3",
            "comment": "dělení a modulení",
            "requires": [],
            "position": [
                1519.6990966796875,
                37.605228424072266
            ],
            "title": "Petrovy stromy"
        },
        {
            "id": "28-Z1-4",
            "type": "open-data",
            "taskReference": "28-Z1-4",
            "comment": "hledání komponent souvislosti",
            "requires": [],
            "position": [
                -1438.7784957885742,
                355.7752151489258
            ],
            "title": "Zuzčina zvědavost"
        },
        {
            "id": "28-Z2-1",
            "type": "open-data",
            "taskReference": "28-Z2-1",
            "comment": "hledání podřetězce",
            "requires": [],
            "position": [
                -345.0656204223633,
                -277.733154296875
            ],
            "title": "Před muzeem"
        },
        {
            "id": "28-Z2-2",
            "type": "open-data",
            "taskReference": "28-Z2-2",
            "comment": "Collatzova domněnka",
            "requires": [],
            "position": [
                1401.8692626953125,
                -524.0748901367188
            ],
            "title": "Práce pro Sáru"
        },
        {
            "id": "28-Z2-3",
            "type": "open-data",
            "taskReference": "28-Z2-3",
            "comment": "seznam sousedů, hledání kružnic dané velikosti (3)",
            "requires": [],
            "position": [
                1261.51611328125,
                -521.9762878417969
            ],
            "title": "Byli jsme tři"
        },
        {
            "id": "28-Z2-4",
            "type": "open-data",
            "taskReference": "28-Z2-4",
            "comment": "spojový seznam nebo eulerovský tah",
            "requires": [],
            "position": [
                -1154.5163879394531,
                1413.4943580627441
            ],
            "title": "Rozsypaná turbína"
        },
        {
            "id": "28-Z3-1",
            "type": "open-data",
            "taskReference": "28-Z3-1",
            "comment": "nalezení minima a maxima",
            "requires": [],
            "position": [
                479.60821533203125,
                -825.9333801269531
            ],
            "title": "Místo oslavy"
        },
        {
            "id": "28-Z3-2",
            "type": "open-data",
            "taskReference": "28-Z3-2",
            "comment": "matematika",
            "requires": [],
            "position": [
                1637.5750732421875,
                40.6045036315918
            ],
            "title": "Zlomkovník"
        },
        {
            "id": "28-Z3-3",
            "type": "open-data",
            "taskReference": "28-Z3-3",
            "comment": "zjednodušení problému??",
            "requires": [],
            "position": [
                874.887451171875,
                -94.75247955322266
            ],
            "title": "Posloupnost za trest"
        },
        {
            "id": "28-Z3-4",
            "type": "open-data",
            "taskReference": "28-Z3-4",
            "comment": "rekurze (není to jednoduché)",
            "requires": [],
            "position": [
                982.91064453125,
                -295.6294708251953
            ],
            "title": "Zbývající úkoly"
        },
        {
            "id": "28-Z4-1",
            "type": "open-data",
            "taskReference": "28-Z4-1",
            "comment": "souřadnice",
            "requires": [],
            "position": [
                509.86163330078125,
                -157.92288208007812
            ],
            "title": "Půdorys"
        },
        {
            "id": "28-Z4-2",
            "type": "open-data",
            "taskReference": "28-Z4-2",
            "comment": "triviální průchod 2D pole",
            "requires": [],
            "position": [
                -928.4460144042969,
                -222.2663803100586
            ],
            "title": "Vykopávky"
        },
        {
            "id": "28-Z4-3",
            "type": "open-data",
            "taskReference": "28-Z4-3",
            "comment": "binární vyhledávání, třídění",
            "requires": [],
            "position": [
                -874.8656311035156,
                1361.2367553710938
            ],
            "title": "Mocniny"
        },
        {
            "id": "28-Z4-4",
            "type": "open-data",
            "taskReference": "28-Z4-4",
            "comment": "dynamické programování, práce s čísly",
            "requires": [],
            "position": [
                505.1663513183594,
                123.459716796875
            ],
            "title": "Čtyřková"
        },
        {
            "type": "open-data",
            "id": "29-1-4",
            "taskReference": "29-1-4",
            "requires": [],
            "position": [
                2426.829833984375,
                1231.6946105957031
            ],
            "title": "Zběsilý útěk"
        },
        {
            "type": "open-data",
            "id": "29-2-4",
            "taskReference": "29-2-4",
            "requires": [],
            "position": [
                2267.0517578125,
                1250.5573425292969
            ],
            "title": "Nejsložitější záhon"
        },
        {
            "type": "open-data",
            "id": "29-3-1",
            "taskReference": "29-3-1",
            "requires": [],
            "position": [
                2419.062744140625,
                1162.9012756347656
            ],
            "title": "Verbování"
        },
        {
            "type": "open-data",
            "id": "29-4-3",
            "taskReference": "29-4-3",
            "requires": [],
            "position": [
                2269.270751953125,
                1179.5448913574219
            ],
            "title": "Výhružné dopisy"
        },
        {
            "type": "open-data",
            "id": "29-5-1",
            "taskReference": "29-5-1",
            "requires": [],
            "position": [
                2420.17236328125,
                1096.3271789550781
            ],
            "title": "Holubí pošta"
        },
        {
            "id": "29-Z1-1",
            "type": "open-data",
            "comment": "Kevinova želva — triviální, průchod po 2D souřadnicích",
            "requires": [
                "label-zelvy"
            ],
            "title": "Kevinova želva",
            "position": [
                536.0025634765625,
                428.0677185058594
            ],
            "taskReference": "29-Z1-1"
        },
        {
            "id": "29-Z1-2",
            "type": "open-data",
            "taskReference": "29-Z1-2",
            "comment": "Sářiny pamlsky — triviální, výpis přirozených čísel na základě pravidel",
            "requires": [],
            "position": [
                -673.1332513093948,
                -18.061513900756836
            ],
            "title": "Sářiny pamlsky"
        },
        {
            "id": "29-Z1-3",
            "type": "open-data",
            "comment": "Petrova statistika — ne úplně triviální, tvorba histogramu z pole",
            "requires": [
                "27-Z2-1"
            ],
            "title": "Petrova statistika",
            "position": [
                -710.7116279602051,
                1196.2334213256836
            ],
            "taskReference": "29-Z1-3"
        },
        {
            "id": "29-Z1-4",
            "type": "open-data",
            "comment": "Zuzčin výlet — DFS (topologické pořadí)",
            "requires": [
                "label-grafy-pracovni-poznamka"
            ],
            "position": [
                -1766.0089111328125,
                196.37316131591797
            ],
            "taskReference": "29-Z1-4",
            "title": "Zuzčin výlet"
        },
        {
            "id": "29-Z2-1",
            "type": "open-data",
            "comment": "Krocení zlé želvy — triviální, průchod po 2D souřadnicích, přímo navazuje na 29-Z1-1",
            "requires": [
                "29-Z1-1"
            ],
            "position": [
                645.7811584472656,
                485.86309814453125
            ],
            "taskReference": "29-Z2-1",
            "title": "Krocení zlé želvy"
        },
        {
            "id": "29-Z2-2",
            "type": "open-data",
            "taskReference": "29-Z2-2",
            "comment": "Sářina volba — spíš triviální, hledání společných vlasností na dvou stejně dlouhých polích",
            "requires": [],
            "position": [
                -1179.8213348388672,
                1273.1260681152344
            ],
            "title": "Sářina volba"
        },
        {
            "id": "29-Z2-3",
            "type": "open-data",
            "taskReference": "29-Z2-3",
            "comment": "Petr v říši divů — grafy - prohledávání (rozpad na komponenty)",
            "requires": [],
            "position": [
                -1597.2468719482422,
                369.05931854248047
            ],
            "title": "Petr v říši divů"
        },
        {
            "id": "29-Z2-4",
            "type": "open-data",
            "taskReference": "29-Z2-4",
            "comment": "Zuzka: Cesta tam a zase zpátky — nejdelší rostoucí podposloupnost splňující podmínku, příběh i vstup připomínají 28-Z4-5",
            "requires": [],
            "position": [
                347.90077209472656,
                -454.14956760406494
            ],
            "title": "Zuzka: Cesta tam a zase zpátky"
        },
        {
            "id": "29-Z3-1",
            "type": "open-data",
            "comment": "Želva na dvorku — spíš triviální, netriviální udělat efektivně (ale asi to není třeba pro úspěch), volně navazuje na 29-Z2-1 a 29-Z1-1, průchod po 2D souřadnicích, invalidní příkazy (směrem do překážky) ignorujeme",
            "requires": [
                "26-Z4-3"
            ],
            "position": [
                -800.1546325683594,
                577.3485870361328
            ],
            "taskReference": "29-Z3-1",
            "title": "Želva na dvorku"
        },
        {
            "id": "29-Z3-2",
            "type": "open-data",
            "comment": "Písemka z angličtiny — voser implementovat, easy dřevorubecký řešení, optimálně trie, což na Z IMHO hard",
            "requires": [
                "26-Z2-3",
                "label-retezce"
            ],
            "position": [
                -588.6411285400391,
                -358.7561950683594
            ],
            "taskReference": "29-Z3-2",
            "title": "Písemka z angličtiny"
        },
        {
            "id": "29-Z3-3",
            "type": "open-data",
            "comment": "Šestková čísla — mega voser implementovat, spíš matematická úloha, převod dešitkových čísel do hacknutých římských",
            "requires": [],
            "position": [
                1229.6161193847656,
                274.53318786621094
            ],
            "taskReference": "29-Z3-3",
            "title": "Šestková čísla"
        },
        {
            "id": "29-Z3-4",
            "type": "open-data",
            "taskReference": "29-Z3-4",
            "comment": "Zdobení stromečku — grafy - prohledávání, hledání kružnice v grafu, zmateně zadané",
            "requires": [],
            "position": [
                -1223.6292419433594,
                342.4906921386719
            ],
            "title": "Zdobení stromečku"
        },
        {
            "id": "29-Z4-1",
            "type": "open-data",
            "taskReference": "29-Z4-1",
            "comment": "Šíření viru — vopruz načítat vstup, přímočaré kvadratické řešení, trochu důmyslnější optimální, podhodnocená as fuck, šíření viru v grafu",
            "requires": [],
            "position": [
                -1222.72802734375,
                406.6653747558594
            ],
            "title": "Šíření viru"
        },
        {
            "id": "29-Z4-2",
            "type": "open-data",
            "taskReference": "29-Z4-2",
            "comment": "Vybírání atrakcí — ezy hladový řešení, pokud si ho umíte zdůvodnit, což není úplně triviální, máme K lidí, pro každého přípustný interval a K² čísel, které každému chceme přidělit",
            "requires": [],
            "position": [
                596.6312255859375,
                96.44056701660156
            ],
            "title": "Vybírání atrakcí"
        },
        {
            "id": "29-Z4-3",
            "type": "open-data",
            "comment": "Želva v akváriu — malej voser, triviální, přímo navazuje na 29-Z2-1 a 29-Z1-1, průchod po 3D souřadnicích",
            "requires": [
                "29-Z1-1",
                "29-Z2-1"
            ],
            "position": [
                501.77142333984375,
                503.8365783691406
            ],
            "taskReference": "29-Z4-3",
            "title": "Želva v akváriu"
        },
        {
            "id": "29-Z4-4",
            "type": "open-data",
            "taskReference": "29-Z4-4",
            "comment": "Hledání součtu — ezy housenka pokud umíte číst, hledání podposloupnosti se součtem co nejbližším zadanému, celé v kladných číslech",
            "requires": [],
            "position": [
                378.12322998046875,
                -405.99293518066406
            ],
            "title": "Hledání součtu"
        },
        {
            "type": "open-data",
            "id": "30-1-4",
            "taskReference": "30-1-4",
            "requires": [],
            "position": [
                2425.829833984375,
                1017.5477600097656
            ],
            "title": "Cesta v bunkru",
            "comment": "Hledání cesty v hilbertově křivce"
        },
        {
            "type": "open-data",
            "id": "30-2-4",
            "taskReference": "30-2-4",
            "requires": [],
            "position": [
                2291.462158203125,
                823.3730773925781
            ],
            "title": "Komprimace"
        },
        {
            "type": "open-data",
            "id": "30-3-1",
            "taskReference": "30-3-1",
            "requires": [],
            "position": [
                2260.394287109375,
                885.5089416503906
            ],
            "title": "Vlnění"
        },
        {
            "type": "open-data",
            "id": "30-4-5",
            "taskReference": "30-4-5",
            "requires": [],
            "position": [
                2434.596923828125,
                816.7156677246094
            ],
            "title": "Frňákovník"
        },
        {
            "type": "open-data",
            "id": "30-5-2",
            "taskReference": "30-5-2",
            "requires": [],
            "position": [
                2432.377685546875,
                878.8515930175781
            ],
            "title": "Útěk z trezorů"
        },
        {
            "id": "30-Z1-1",
            "type": "open-data",
            "taskReference": "30-Z1-1",
            "title": "Kevinova nepatnáctka",
            "comment": "Trivka, chození po souřadnicích",
            "requires": [],
            "position": [
                -992.762939453125,
                -321.29197692871094
            ]
        },
        {
            "id": "30-Z1-2",
            "type": "open-data",
            "taskReference": "30-Z1-2",
            "title": "Sářiny loutky",
            "comment": "Hladový algoritmus",
            "requires": [],
            "position": [
                -885.642822265625,
                86.39183807373047
            ]
        },
        {
            "id": "30-Z1-3",
            "type": "open-data",
            "taskReference": "30-Z1-3",
            "title": "Petrovo luštění zprávy",
            "comment": "Hledání nejčastějšího výskytu ",
            "requires": [],
            "position": [
                -271.56785583496094,
                -510.6902160644531
            ]
        },
        {
            "id": "30-Z1-4",
            "type": "open-data",
            "taskReference": "30-Z1-4",
            "title": "Zuzčin projekt",
            "comment": "Sousednost v grafu",
            "requires": [],
            "position": [
                -1565.0438842773438,
                316.3718795776367
            ]
        },
        {
            "id": "30-Z2-1",
            "type": "open-data",
            "taskReference": "30-Z2-1",
            "title": "K-k-koktavý K-K-Kevin",
            "comment": "Trivka, projít string a skippovat duplikáty",
            "requires": [],
            "position": [
                -403.6249237060547,
                -350.6728820800781
            ]
        },
        {
            "id": "30-Z2-2",
            "type": "open-data",
            "taskReference": "30-Z2-2",
            "title": "Hřiště pro tarantule",
            "comment": "Chození po souřadnicích, detekce kolizí",
            "requires": [],
            "position": [
                513.1159057617188,
                -111.86053466796875
            ]
        },
        {
            "id": "30-Z2-3",
            "type": "open-data",
            "taskReference": "30-Z2-3",
            "title": "Klonování pavouků",
            "comment": "Sestavení stromu a vypsání cesty do kořene",
            "requires": [],
            "position": [
                -1327.8906602859497,
                244.3093490600586
            ]
        },
        {
            "id": "30-Z2-4",
            "type": "open-data",
            "taskReference": "30-Z2-4",
            "title": "Příliš bílý displej",
            "comment": " Práce s 2d polem",
            "requires": [],
            "position": [
                -1107.7801971435547,
                -419.0527801513672
            ]
        },
        {
            "id": "30-Z3-1",
            "type": "open-data",
            "taskReference": "30-Z3-1",
            "title": "Rozkolísaná produktivita",
            "comment": " Hledání dvou čísel s co největším rozdílem",
            "requires": [],
            "position": [
                -611.8720817565918,
                1088.3259280920029
            ]
        },
        {
            "id": "30-Z3-2",
            "type": "open-data",
            "taskReference": "30-Z3-2",
            "title": "Podlézání Číňanům",
            "comment": "Výroba palindromu",
            "requires": [],
            "position": [
                -512.0505065917969,
                -285.66261291503906
            ]
        },
        {
            "id": "30-Z3-3",
            "type": "open-data",
            "taskReference": "30-Z3-3",
            "title": "Teambuilding",
            "comment": "Voser implementovat, hledání klíčů na odemčení dveří",
            "requires": [],
            "position": [
                1280.2218017578125,
                -275.69879150390625
            ]
        },
        {
            "id": "30-Z3-4",
            "type": "open-data",
            "taskReference": "30-Z3-4",
            "title": "Korporátní seznamka",
            "comment": "Voser implementovat, doplňování do stringu",
            "requires": [],
            "position": [
                1161.6162109375,
                -319.74127197265625
            ]
        },
        {
            "id": "30-Z4-1",
            "type": "open-data",
            "taskReference": "30-Z4-1",
            "title": "Statistika sprintů",
            "comment": " Prefixové součty",
            "requires": [],
            "position": [
                -1140.9943389892578,
                -474.1478576660156
            ]
        },
        {
            "id": "30-Z4-2",
            "type": "open-data",
            "taskReference": "30-Z4-2",
            "title": "Klíče od tělocvičny",
            "comment": "Provházení bludiště",
            "requires": [],
            "position": [
                -1713.9394073486328,
                315.67919158935547
            ]
        },
        {
            "id": "30-Z4-3",
            "type": "open-data",
            "taskReference": "30-Z4-3",
            "title": "Uhlazovací válec",
            "comment": "ProhledávánI grafu",
            "requires": [],
            "position": [
                -1414.956787109375,
                298.2016830444336
            ]
        },
        {
            "id": "30-Z4-4",
            "type": "open-data",
            "taskReference": "30-Z4-4",
            "title": "Ohrazení zahrádky",
            "comment": "Trivka, práce souřadnicemi",
            "requires": [],
            "position": [
                -1050.291244506836,
                -367.55816745758057
            ]
        },
        {
            "type": "open-data",
            "id": "31-1-1",
            "taskReference": "31-1-1",
            "requires": [],
            "position": [
                2454.366792678833,
                946.1978244781494
            ],
            "title": "Karkulčin byznys"
        },
        {
            "type": "open-data",
            "id": "31-2-4",
            "taskReference": "31-2-4",
            "requires": [],
            "position": [
                2271.184907913208,
                947.7135105133057
            ],
            "title": "Továrna na perník"
        },
        {
            "type": "open-data",
            "id": "31-3-3",
            "taskReference": "31-3-3",
            "requires": [],
            "position": [
                2253.449312210083,
                1036.687936782837
            ],
            "title": "Přebírání hrachu"
        },
        {
            "type": "open-data",
            "id": "31-4-3",
            "taskReference": "31-4-3",
            "requires": [],
            "position": [
                2268.606294631958,
                1107.9266452789307
            ],
            "title": "Nejvíc spánku"
        },
        {
            "type": "open-data",
            "id": "31-5-3",
            "taskReference": "31-5-3",
            "requires": [],
            "position": [
                2095.814790725708,
                1282.2340183258057
            ],
            "title": "Kváskový chléb"
        },
        {
            "id": "31-Z1-1",
            "type": "open-data",
            "requires": [],
            "comment": "úloha s odčítáním času",
            "title": "Zuzka a poník",
            "position": [
                -641.1309432983398,
                -254.37389373779297
            ],
            "taskReference": "31-Z1-1"
        },
        {
            "id": "31-Z1-2",
            "type": "open-data",
            "comment": "BFS (šachovnice, custom figurka, nejkratší cesta)  ",
            "requires": [
                "label-grafy-pracovni-poznamka"
            ],
            "position": [
                -1444.3232421875,
                224.83528900146484
            ],
            "taskReference": "31-Z1-2",
            "title": "Ukradený jezdec"
        },
        {
            "id": "31-Z1-3",
            "type": "open-data",
            "taskReference": "31-Z1-3",
            "comment": "průnik N intervalů (3D na kvádrech)",
            "requires": [],
            "position": [
                954.6195068359375,
                -144.04727935791016
            ],
            "title": "Průnik kvádrů"
        },
        {
            "id": "31-Z1-4",
            "type": "open-data",
            "comment": "2D pole (až na poslední vstup), hešování (piškvorky) - navazuje na 26-Z1-2",
            "requires": [
                "26-Z1-2"
            ],
            "title": "Piškvorky naslepo",
            "position": [
                -984.0560913085938,
                622.9081573486328
            ],
            "taskReference": "31-Z1-4"
        },
        {
            "id": "31-Z2-1",
            "type": "open-data",
            "taskReference": "31-Z2-1",
            "comment": "hešování (objednávka pizzy po dílcích, ceil(group by typ, sum, / 8)))",
            "requires": [],
            "position": [
                1182.9420166015625,
                -121.8834228515625
            ],
            "title": "Objednávka pizzy"
        },
        {
            "id": "31-Z2-2",
            "type": "open-data",
            "taskReference": "31-Z2-2",
            "comment": "2D pole (simulace tetrisu)",
            "requires": [],
            "position": [
                -959.19970703125,
                -270.38741302490234
            ],
            "title": "Tetris bez dozoru"
        },
        {
            "id": "31-Z2-3",
            "type": "open-data",
            "taskReference": "31-Z2-3",
            "comment": "ňáký šachy, předzpracování, hledání nejbližších věží a střelců in bulk - chce lepší tag",
            "requires": [],
            "position": [
                851.67236328125,
                952.2879638671875
            ],
            "title": "Spousta figurek"
        },
        {
            "id": "31-Z2-4",
            "type": "open-data",
            "taskReference": "31-Z2-4",
            "comment": "hledání periody v desetinném čísle",
            "requires": [],
            "position": [
                1841.7220458984375,
                38.87567901611328
            ],
            "title": "Zmatematika"
        },
        {
            "id": "31-Z3-1",
            "type": "open-data",
            "taskReference": "31-Z3-1",
            "comment": "triviální - zapamatování stringů (vybírání rýmů)",
            "requires": [],
            "position": [
                -224.54463958740234,
                -419.3528137207031
            ],
            "title": "Tvůrčí krize"
        },
        {
            "id": "31-Z3-2",
            "type": "open-data",
            "comment": "DFS (hledání cesty v grafu po písmenech)",
            "requires": [
                "label-grafy-pracovni-poznamka"
            ],
            "position": [
                -1710.0618896484375,
                254.14208221435547
            ],
            "taskReference": "31-Z3-2",
            "title": "Zámek obrazovky"
        },
        {
            "id": "31-Z3-3",
            "type": "open-data",
            "comment": "barvení bipartitního grafu (hledání partit), na vstupu hrany",
            "requires": [
                "26-Z1-4",
                "label-grafy"
            ],
            "position": [
                -1580.1476440429688,
                44.96050262451172
            ],
            "taskReference": "31-Z3-3",
            "title": "Stáda hrochů"
        },
        {
            "id": "31-Z3-4",
            "type": "open-data",
            "taskReference": "31-Z3-4",
            "comment": "geometrie - přihrádky/zametání (vypsat všechny dvojice bodů s vzdáleností max K)",
            "requires": [],
            "position": [
                828.0521850585938,
                204.80533599853516
            ],
            "title": "Pohyb termitů"
        },
        {
            "id": "31-Z4-1",
            "type": "open-data",
            "taskReference": "31-Z4-1",
            "comment": "sort + průchod pole (nejosamělejší bod na přímce)",
            "requires": [],
            "position": [
                -813.29612159729,
                1405.5709838867188
            ],
            "title": "Nejosamělejší kamarád"
        },
        {
            "id": "31-Z4-2",
            "type": "open-data",
            "taskReference": "31-Z4-2",
            "comment": "binární čísla",
            "requires": [],
            "position": [
                1822.9569702148438,
                -115.60995483398438
            ],
            "title": "Závažíčka na druhou"
        },
        {
            "type": "open-data",
            "id": "31-Z4-3",
            "taskReference": "31-Z4-3",
            "requires": [],
            "position": [
                1538.031099319458,
                801.7519016265869
            ],
            "title": "Probíhání bludištěm"
        },
        {
            "type": "open-data",
            "id": "31-Z4-4",
            "taskReference": "31-Z4-4",
            "requires": [],
            "position": [
                1499.911958694458,
                901.5865573883057
            ],
            "title": "Ohnivý únik"
        },
        {
            "type": "open-data",
            "id": "32-1-1",
            "taskReference": "32-1-1",
            "requires": [],
            "position": [
                2098.499687194824,
                1213.835223197937
            ],
            "title": "Zkomolené vysílání"
        },
        {
            "type": "open-data",
            "id": "32-2-2",
            "taskReference": "32-2-2",
            "requires": [],
            "position": [
                2080.4985275268555,
                862.9364805221558
            ],
            "title": "Mezihvězdné jízdní řády"
        },
        {
            "type": "open-data",
            "id": "32-3-1",
            "taskReference": "32-3-1",
            "requires": [],
            "position": [
                2102.0034103393555,
                937.4345273971558
            ],
            "title": "Zkrat"
        },
        {
            "type": "open-data",
            "id": "32-4-4",
            "taskReference": "32-4-4",
            "requires": [],
            "position": [
                2101.0969161987305,
                1080.7460508346558
            ],
            "title": "Zpětný signál"
        },
        {
            "type": "open-data",
            "id": "32-5-5",
            "taskReference": "32-5-5",
            "requires": [],
            "position": [
                2098.2350997924805,
                1004.0238218307495
            ],
            "title": "Druhá kostra"
        },
        {
            "type": "open-data",
            "id": "32-5-6",
            "taskReference": "32-5-6",
            "requires": [],
            "position": [
                2058.4335861206055,
                715.0660581588745
            ],
            "title": "Geocaching s odhadem"
        },
        {
            "type": "open-data",
            "id": "32-Z1-1",
            "taskReference": "32-Z1-1",
            "requires": [],
            "position": [
                1411.155632019043,
                1141.5684385299683
            ],
            "title": "Kevin v papírnictví"
        },
        {
            "type": "open-data",
            "id": "32-Z1-2",
            "taskReference": "32-Z1-2",
            "requires": [],
            "position": [
                1248.442741394043,
                1383.991473197937
            ],
            "title": "Chybná účtenka"
        },
        {
            "type": "open-data",
            "id": "32-Z1-3",
            "taskReference": "32-Z1-3",
            "requires": [],
            "position": [
                1140.155632019043,
                1328.5684385299683
            ],
            "title": "Školní knihy"
        },
        {
            "type": "open-data",
            "id": "32-Z1-4",
            "taskReference": "32-Z1-4",
            "requires": [],
            "position": [
                959.155632019043,
                1308.5684385299683
            ],
            "title": "Plánek školy"
        },
        {
            "type": "open-data",
            "id": "32-Z2-1",
            "taskReference": "32-Z2-1",
            "requires": [],
            "position": [
                1572.155632019043,
                1029.5684385299683
            ],
            "title": "Prší"
        },
        {
            "type": "open-data",
            "id": "32-Z2-2",
            "taskReference": "32-Z2-2",
            "requires": [],
            "position": [
                1471.155632019043,
                681.5684385299683
            ],
            "title": "Turnaj hada"
        },
        {
            "type": "open-data",
            "id": "32-Z2-3",
            "taskReference": "32-Z2-3",
            "requires": [],
            "position": [
                1686.191276550293,
                928.291277885437
            ],
            "title": "Panika v chodbě"
        },
        {
            "type": "open-data",
            "id": "32-Z2-4",
            "taskReference": "32-Z2-4",
            "requires": [],
            "position": [
                1228.155632019043,
                733.5684385299683
            ],
            "title": "Opisování v testu"
        },
        {
            "type": "open-data",
            "id": "32-Z3-1",
            "taskReference": "32-Z3-1",
            "requires": [],
            "position": [
                1327.155632019043,
                622.5684385299683
            ],
            "title": "Tiskařský stroj"
        },
        {
            "type": "open-data",
            "id": "32-Z3-2",
            "taskReference": "32-Z3-2",
            "requires": [],
            "position": [
                1159.339469909668,
                868.9643125534058
            ],
            "title": "Sářina omalovánka"
        },
        {
            "type": "open-data",
            "id": "32-Z3-3",
            "taskReference": "32-Z3-3",
            "requires": [],
            "position": [
                1255.4586715698242,
                1507.3838682174683
            ],
            "title": "Akční ceny"
        },
        {
            "type": "open-data",
            "id": "32-Z3-4",
            "taskReference": "32-Z3-4",
            "requires": [],
            "position": [
                1671.468864440918,
                1398.2491025924683
            ],
            "title": "Dálnice"
        },
        {
            "type": "open-data",
            "id": "32-Z4-1",
            "taskReference": "32-Z4-1",
            "requires": [],
            "position": [
                1107.155632019043,
                680.5684385299683
            ],
            "title": "Jednobarevné praní"
        },
        {
            "type": "open-data",
            "id": "32-Z4-2",
            "taskReference": "32-Z4-2",
            "requires": [],
            "position": [
                1595.155632019043,
                1108.5684385299683
            ],
            "title": "Hoří chleba?"
        },
        {
            "type": "open-data",
            "id": "32-Z4-3",
            "taskReference": "32-Z4-3",
            "requires": [],
            "position": [
                1420.5522384643555,
                1229.4311094284058
            ],
            "title": "Esej do bloku"
        },
        {
            "type": "open-data",
            "id": "32-Z4-4",
            "taskReference": "32-Z4-4",
            "requires": [],
            "position": [
                748.155632019043,
                1242.5684385299683
            ],
            "title": "Bomberman uklízí"
        },
        {
            "type": "open-data",
            "id": "33-Z1-1",
            "taskReference": "33-Z1-1",
            "requires": [],
            "position": [
                -485.75508880615234,
                1214.0445737838745
            ],
            "title": "Kontrola závorkových programů"
        },
        {
            "type": "open-data",
            "id": "33-Z1-2",
            "taskReference": "33-Z1-2",
            "requires": [],
            "position": [
                876.1545333862305,
                754.659197807312
            ],
            "title": "Sobotní den železnice"
        },
        {
            "type": "open-data",
            "id": "33-Z1-3",
            "taskReference": "33-Z1-3",
            "requires": [],
            "position": [
                1633.5070114135742,
                1444.5108823776245
            ],
            "title": "Petrův zmatený výlet"
        },
        {
            "id": "algoritmy",
            "type": "text",
            "comment": "...",
            "requires": [],
            "title": "Algoritmy",
            "htmlContent": "<h2>Algoritmy</h2><p>Každý program je vlastně popis nějakého pracovního postupu. Té samotné myšlence, oddělené od konkrétního způsobu implementace, říkáme <strong>algoritmus</strong>.</p><p>Algoritmy jsou principy, které zůstávají stejné neustále. Algoritmy vymyšlené před 50 lety jsou často stále to nejlepší, co známe. Často i to nejlepší, co je vůbec možné. Proto dává smysl zabývat se studiem samotných algoritmů. Programovací jazyky se mění. Metoda zápisu toho samého algoritmu často také. Ale základní myšlenka je pořád stejná.</p>",
            "position": [
                -698.2805023193359,
                -922.5820579528809
            ]
        },
        {
            "id": "data",
            "type": "text",
            "comment": "...",
            "requires": [],
            "title": "Datové struktury",
            "htmlContent": "<p>Ruku v ruce s algoritmy jdou data. Nemít data, tak nemáme co počítat, že?</p><h2>Data v počítači</h2><p>Data, nad kterými v programu pracujeme, ukládáme do paměti. Fyzicky je pamět hodně dlouhá posloupnost jedniček a nul – bitů. To je ale nepraktické a tak bity skupinkujeme do bytů – 8 bitů aneb čísel od 0 do 255.</p><p>Takže paměť je jen hodně číslíček za sebou, jak ale tedy vznikají například obrázky, na které na monitoru koukáme? Jak vlastně můžeme reprezentovat větší čísla než 255? Jednou z možností je například zapisovat si jednotlivé cifry velkého čísla. Ještě pak potřebujeme vědět, kolik jich je, ale tuhle informaci si můžeme uložit například na začátek.</p><p>FIXME obrázek</p><p>Právě jsme si popsali, jak z jednoduchých základních kamenů, posloupnosti malých čísel, postavit něco většího. Něco, čemu vznešeně říkáme datová struktura.</p><h2>Datové struktury</h2><p>Datové struktury popisují, jak reprezentovat nějaké komplexní informace z jednodušších bloků (na nejnižší úrovni z posloupnosti čísel). Velmi blízce souvisí s algoritmy. Mnoho algoritmů by nám bez datových struktur bylo k ničemu a naopak mnoho datových struktur by nedávalo smysl bez algoritmů. My si proto budeme povídat o datových strukturách a algoritmech společně.</p><p>Úlohy, které najdeš dále, se zabývají nějakou datovou strukturou nebo algoritmem. Jsou uspořádány s rostoucí obtížností a může se stát, že pro pochopení složitějších úloh je často potřeba mít vštípené detaily struktury předchozí.</p>",
            "position": [
                -696.7079391479492,
                -876.2786036729813
            ]
        },
        {
            "id": "jak-resit-ulohy",
            "type": "text",
            "requires": [
                "start"
            ],
            "comment": "kecy o tom, jak se může řešit taková úloha",
            "title": "Jak řešit úlohy?",
            "htmlContent": "",
            "position": [
                -2.4084014892578125,
                -61.00055694580078
            ]
        },
        {
            "id": "KSP-h-ulohy",
            "type": "label",
            "comment": "...",
            "requires": [],
            "title": "KSP-H úlohy",
            "position": [
                2225.972201347351,
                625.0823974609375
            ]
        },
        {
            "id": "kucharka-zakladni-algoritmus",
            "type": "text",
            "comment": "https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/",
            "requires": [
                "jak-resit-ulohy"
            ],
            "title": "Algoritmus",
            "htmlContent": "<h3>Algoritmus a&nbsp;program</h3><p>Pod tajemným slovem <i>algoritmus</i> se skrývá jen jiný výraz pro postup. Můžete si to představit jako příkaz od maminky „Běž do krámu, kup chleba, a&nbsp;když budou mít měkké rohlíky, tak jich vem tucet“. (A jako slušně vychovaní se tedy vydáte do krámu a&nbsp;koupíte tucet chlebů, protože měli měkké rohlíky :-))</p><p>Takovýto příkaz klidně můžeme nazvat algoritmem, ačkoliv to bude asi znít nezvykle&nbsp;– pojem algoritmus se totiž používá hlavně ve světě počítačů. Je to tedy nějaká posloupnost základních příkazů, která řeší nějaký problém. Výběr konkrétního programovacího jazyka rozhoduje o&nbsp;tom, jaké základní příkazy budeme mít k&nbsp;dispozici. Většinou jsou ale skoro stejné.</p><p>Mezi základní příkazy patří:</p><ul><li>Manipulace s&nbsp;daty v&nbsp;paměti (uložení či načtení hodnoty, detailněji v&nbsp;další kapitole).</li><li>Provedení nějakého numerického výpočtu (+,-,*,/).</li><li>Vyhodnocení nějaké konkrétní podmínky a&nbsp;odpovídající větvení programu: <i>Pokud platí A, tak proveď B, jinak proveď C.</i> Přitom B&nbsp;i&nbsp;C mohou být klidně celé <i>bloky kódu</i>, tedy libovolně mnoho dalších základních příkazů.</li><li>Opakování nějakého příkazu: <i>Dokud platí A, dělej B.</i> Takové konstrukci říkáme <i>cyklus</i> a&nbsp;podobně jako u&nbsp;podmínky může být B&nbsp;blok kódu, který se celý opakuje.</li><li>Vstup a&nbsp;výstup programu (typicky vstup od uživatele z&nbsp;klávesnice či načtení vstupu ze souboru; výstup pak může znamenat vypsání výsledku na obrazovku nebo třeba zapsání dat do souboru).</li></ul><p>Z&nbsp;těchto základních stavebních kamenů se skládá každý algoritmus. Programem potom rozumíme realizaci algoritmu v&nbsp;nějakém konkrétním programovacím jazyce.</p><p>U&nbsp;složitějších programů se pak často setkáme s&nbsp;problémem, že budete mít nějakou posloupnost příkazů, která se bude na spoustě míst programu opakovat, což zbytečně prodlužuje a znepřehledňuje kód.</p><p>Řešením tohoto problému je použití <i>funkcí</i>. Funkci si můžeme představit jako nějakou pojmenovanou část programu (s&nbsp;vlastní pamětí), kterou můžeme opakovaně použít tím, že ji v&nbsp;různých částech programu <i>zavoláme</i>. Funkci při zavolání předáme parametry (například seznam čísel), které se dostanou do její vnitřní paměti.</p><p>Funkce pak na základě obdržených parametrů může provádět nějaké operace, při kterých pracuje se svojí vnitřní pamětí (mluvíme o&nbsp;<i>lokální</i> paměti, změny v&nbsp;ní se neprojeví nikde mimo funkci). Na konci nám funkce může vrátit nějaký výsledek. Pokud funkce během svého běhu změní i nějaká data v&nbsp;<i>globální</i> paměti, či provede nějakou globální operaci (například výpis textu na monitor), mluvíme pak o&nbsp;funkci s&nbsp;<i>vedlejšími efekty</i> (neboli side-efekty).</p><p>Konkrétním příkladem může být funkce, která nám spočítá odmocninu ze zadaného čísla. Ta dostane jako svůj parametr číslo, uvnitř si provede nějaký výpočet, o&nbsp;který se jako uživatel funkce nemusíme starat, a&nbsp;jako výstup nám vrátí spočtenou odmocninu.</p>",
            "position": [
                -107.73027038574219,
                18.552040100097656
            ]
        },
        {
            "id": "kucharka-zakladni-binarni-vyhledavani",
            "type": "text",
            "comment": "...",
            "requires": [
                "kucharka-zakladni-pole"
            ],
            "title": "Rozděl a panuj - binární vyhledávání",
            "htmlContent": "<h3>Rozděl a&nbsp;panuj</h3><p>Jednou ze základních technik je rozdělení složitějšího problému na menší části, které opět můžeme rozdělit na menší a&nbsp;tak dále, dokud se nedostaneme k&nbsp;problémům tak malým, že je už umíme triviálně vyřešit.</p><h4>Binární vyhledávání v&nbsp;poli</h4><p>Představme si, že máme seřazené pole n&nbsp;prvků a&nbsp;chceme zjistit, jestli se v&nbsp;něm nachází prvek s&nbsp;hodnotou&nbsp;k. Určitě můžeme projít celé pole v&nbsp;lineárním čase (tím, že budeme brát jeden prvek za druhým a&nbsp;kontrolovat, zda je roven hodnotě&nbsp;k), ale to je zbytečně pomalé a&nbsp;nevyužívá toho, že máme pole seřazené.</p><p>Můžeme totiž začít s&nbsp;velkým problémem a&nbsp;ten postupně zmenšovat na stále menší a&nbsp;menší. Nejdříve hledáme&nbsp;k v&nbsp;celém poli. Podíváme se na jeho prostřední prvek:</p><ul><li>Pokud je roven&nbsp;k, jsme hotovi.</li><li>Je-li větší než&nbsp;k, víme, že se k&nbsp;musí nacházet nalevo od něj. Můžeme tedy hledat znovu, ale tentokrát se omezit jen na levou polovinu pole.</li><li>Analogicky, je-li menší než&nbsp;k, můžeme hledat jen v&nbsp;pravé polovině.</li></ul><p>Když tímto postupným dělením problémů na menší dojdeme až k&nbsp;poli o&nbsp;velikosti jednoho prvku, stačí tento prvek jenom porovnat, dál už se pole nepokoušíme rozdělovat.</p><p>Jelikož se nám každým krokem problém zmenší na polovinu, maximálně po log n krocích se dostaneme na pole velikosti jedna. Říkáme, že algoritmus má <i>logaritmickou časovou složitost</i>, píšeme O(log n). (Pokud není řečeno jinak, znamená pro nás v&nbsp;informatice značka log <i>dvojkový logaritmus</i>, což je funkce opačná k&nbsp;funkci 2n a&nbsp;roste o&nbsp;hodně pomaleji než funkce lineární. Pro velká&nbsp;n platí: 1 &lt; log n &lt; n a&nbsp;například log 2 = 1, log 8 = 3, log 1024 = 10.)</p><p>Prakticky postup provádíme tak, že si udržujeme levý a&nbsp;pravý okraj aktuálně zpracovávaného úseku a&nbsp;postupně je k&nbsp;sobě přibližujeme.</p><p>FIXME code</p><h4>Další aplikace</h4><p>Další typickou aplikací postupu rozděl a&nbsp;panuj je například třídění posloupnosti pomocí <i>Mergesortu</i>. Ten v&nbsp;základu funguje tak, že každou posloupnost, kterou dostane k&nbsp;setřídění, rozdělí na poloviny a každou z&nbsp;nich setřídí rekurzivním zavoláním sebe sama. Zanořování se zastaví ve chvíli, kdy třídíme posloupnost délky jedna (ta už je z&nbsp;podstaty setříděná). Pak jen v&nbsp;každém kroku ze dvou setříděných menších posloupností vyrobí jejich sléváním setříděnou posloupnost dvojnásobné délky.</p><p>Více se o&nbsp;metodě Rozděl a&nbsp;panuj můžete dozvědět ve stejnojmenné <a href=\"https://ksp.mff.cuni.cz/viz/kucharky/rozdel-a-panuj\">kuchařce</a>.</p>",
            "position": [
                -503.13873291015625,
                258.8162040710449
            ]
        },
        {
            "id": "kucharka-zakladni-dynamicke-programovani",
            "type": "text",
            "comment": "...",
            "requires": [],
            "title": "Dynamické programování",
            "htmlContent": "<h3>Předpočítané mezivýsledky</h3><p>Motivací k&nbsp;této kapitole je následující motto: „Proč počítat něco vícekrát, když nám to stačí spočítat jednou a&nbsp;zapamatovat si to?“.</p><p>Velmi často se totiž setkáváme s&nbsp;tím, že něco počítáme stále dokola. Jako příklad si můžeme připomenout naši rekurzivní implementaci počítání Fibonacciho čísel zmíněnou výše.</p><p>Když se podíváme na výpočet čísla fib(5), vidíme, že pro něj voláme fib(4) a&nbsp;fib(3), fib(4) volá fib(3) a&nbsp;fib(2), fib(3) volá fib(2) a&nbsp;fib(1) a&nbsp;tak dále. Všimli jste si, kolikrát se nám tyhle výpočty opakují? Některá Fibonacciho čísla spočteme totiž zbytečně mnohokrát.</p><figure class=\"image\"><img src=\"https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/zakladni_algoritmy-5.png\" alt=\"Strom výpočtu Fibonacciho čísla\"></figure><p>Kdybychom si je namísto opakovaného počítání někde pamatovali, mohli bychom pak odpověď na dotaz na již vypočtené číslo vytáhnout jako králíka z&nbsp;klobouku v&nbsp;konstantním čase. Zavedením jednoho globálního pole, ve kterém si tyto hodnoty pro jednotlivá n budeme pamatovat, nám sníží časovou složitost z&nbsp;O(2n) na pěkných O(n). Takovému postupu se obecně říká <i>dynamické programování</i>.</p><h4>Dynamické programování</h4><figure class=\"image\"><img src=\"https://ksp.mff.cuni.cz/img/hippo_dynamit.png\" alt=\"Dynamitské programování\"></figure><p>Nejprve uveďme na pravou váhu výraz „dynamické“ v&nbsp;názvu. Nevystihuje tak úplně podstatu této techniky a jeho historické pozadí je celkem složité, avšak dnes je tento název již tak zažitý, že se už pravděpodobně nezmění.</p><p>Slovo „dynamické“ částečně odkazuje na to, že se dynamicky (za běhu programu) postupně staví řešení jednodušších problémů, která jsou následně použita pro řešení složitějších. Jeho hlavní podstatou je tedy ukládání a&nbsp;opětovné použití již jednou vypočtených údajů.</p><p>Hodí se na úlohy, které se dají dělit na podúlohy, které jsou si podobné a&nbsp;mohou se opakovat. Výsledky takovýchto podúloh si poté ukládáme a&nbsp;při dotazu na stejnou podúlohu vrátíme jen uložený výsledek a&nbsp;výpočet již neprovádíme.</p><p>Pro další prohloubení znalostí můžete na našem webu nahlédnout do další kuchařky, tentokrát nesoucí (překvapivě) název <a href=\"https://ksp.mff.cuni.cz/viz/kucharky/dynamicke-programovani\">Dynamické programování</a>.</p>",
            "position": [
                105.5970230102539,
                184.27716064453125
            ]
        },
        {
            "id": "kucharka-zakladni-fronta-a-zasobnik",
            "type": "text",
            "comment": "https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/",
            "requires": [
                "kucharka-zakladni-spojovy-seznam"
            ],
            "title": "Fronta a zásobník",
            "htmlContent": "<h4>Fronta a zásobník</h4><p>S&nbsp;použitím spojových seznamů (nebo v&nbsp;jednodušším případě dokonce i polí) můžeme zkonstruovat dvě velmi užitečné datové struktury, frontu a zásobník.</p><p><i>Fronta</i> funguje tak, jak si ji asi každý z&nbsp;nás představuje: ten, kdo se do fronty postaví první, také první přijde na řadu. Trochu jinak si ji můžeme představit jako trubku, do které na jedné straně sypeme nějaké věci a na druhé je odebíráme. Anglicky je též nazývaná <i>FIFO</i> (<i>„First In, First Out“</i>).</p><p>Praktickou realizaci uděláme jednoduše spojovým seznamem. Budeme si držet dva ukazatele, jeden na začátek seznamu, druhý na konec. Když se objeví nový prvek, který do fronty budeme chtít vložit, přidáme ho na konec, zatímco při odebírání z&nbsp;fronty využijeme druhého ukazatele a vezmeme prvek ze začátku.</p><p>Druhou velmi podobnou datovou strukturou je <i>zásobník</i>. Jak už ale plyne z&nbsp;anglického názvu <i>LIFO</i> (<i>„Last In, First Out“</i>), funguje spíše jako plný šuplík: Nahoru do něj přidáváme nové prvky, a když chceme nějaký odebrat, vezmeme také zvrchu. To znamená, že první se na řadu dostane naposledy vložený prvek.</p><p>Implementace je velmi obdobná jako u&nbsp;fronty, jen bude ukazatel pouze jeden a&nbsp;bude ukazovat jenom na jeden konec spojového seznamu, konkrétně na poslední prvek.</p>",
            "position": [
                -125.77913665771484,
                357.2399787902832
            ]
        },
        {
            "id": "kucharka-zakladni-grafy",
            "type": "text",
            "comment": "https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/",
            "requires": [
                "kucharka-zakladni-knihovny"
            ],
            "title": "Grafy",
            "htmlContent": "<h4>Grafy</h4><p>S&nbsp;nějakými grafy jste se již možná potkali, ale tento pojem je bohužel docela přetěžovaný. Jedním jeho významem jsou „koláčové grafy“ a&nbsp;jiné další diagramy znázorňující nějaký poměr (ať už to jsou výsledky voleb, nebo poměr lidí, kteří sledovali v&nbsp;televizi Večerníček).</p><p>Další význam můžeme nalézt v&nbsp;analytické matematice, kde se potkáme s&nbsp;grafy průběhu nějakých funkcí. My však nemáme na mysli ani jedno z&nbsp;výše zmíněných, teď se budeme bavit o&nbsp;<i>kombinatorických grafech</i>.</p><p>Grafem tedy máme na mysli nějakou množinu objektů, říkejme jim <i>vrcholy</i>, a&nbsp;nějaké vztahy mezi nimi. Tyto vztahy nazýváme <i>hranami</i> a&nbsp;jsou vyjádřené dvojicemi vrcholů, mezi kterými vedou. Ukázku takového grafu vidíme třeba na následujícím obrázku.</p><figure class=\"image\"><img src=\"https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/zakladni_algoritmy-3.png\" alt=\"Graf\"></figure><p>Jako praktickou ukázku grafu si můžeme například představit silniční síť nějakého státu: vrcholy budou města a&nbsp;hrany budou silnice, které mezi nimi vedou.</p><p>Občas se můžete setkat s&nbsp;pojmem <i>souvislý</i> graf. Ten znamená jen to, že mezi každými dvěma vrcholy existuje nějaká cesta. Pokud tomu tak není, je graf <i>nesouvislý</i> a&nbsp;dá se rozložit na několik menších grafů, které již souvislé jsou a&nbsp;říká se jim <i>komponenty souvislosti</i>.</p><p>Samotný graf poté můžeme doplnit tím, že si v&nbsp;každém vrcholu nebo na každé hraně budeme pamatovat nějakou hodnotu (například cenu nejlevnějšího benzínu ve městech a&nbsp;délku v&nbsp;kilometrech na silnicích). Pamatování si hodnot ve vrcholech je docela obvyklá technika a nemá speciální název, ale pokud budeme mít graf, který si pamatuje hodnoty na hranách, budeme o&nbsp;něm mluvit jako o&nbsp;<i>ohodnoceném grafu</i>.</p><p>Další možnou úpravou je, že každá hrana povede jen jedním směrem (jednosměrné silnice), takovým grafům říkáme <i>orientované</i> (pokud pak v&nbsp;orientovaném grafu chceme silnici oběma směry, prostě do něj přidáme dvě hrany, jednu v&nbsp;každém směru).</p><p>Poslední, co nám schází k&nbsp;praktickému použití grafů, je naučit se, jak je reprezentovat v&nbsp;počítači. Existuje několik možností (v popisech bude n značit počet vrcholů, m&nbsp;počet hran):</p><ul><li><strong>Seznam sousedů</strong>&nbsp;– vrcholy grafu budeme mít uložené v&nbsp;poli a&nbsp;u&nbsp;každého vrcholu budeme mít (spojový) seznam čísel dalších vrcholů, do kterých z&nbsp;aktuálního vrcholu vede hrana. Zabírá místo O(n+m) a&nbsp;hodí se pro řídké grafy (tedy grafy, kde je m&nbsp;řádově stejné jako&nbsp;n).</li><li><strong>Matice sousednosti</strong>&nbsp;– tabulka n×n, kde na souřadnicích [i,j] je jednička (nebo jiná hodnota, v&nbsp;případě ohodnoceného grafu), pokud z&nbsp;i do j vede hrana, a&nbsp;nula, pokud tam hrana není (u&nbsp;neorientovaných grafů je navíc matice symetrická&nbsp;– je jedno, jestli vezmeme [i,j] nebo [j,i]). Hodí se pro husté grafy, kde m~n2.</li><li><strong>Matice incidence</strong>&nbsp;– řádky reprezentují vrcholy, sloupce hrany. V&nbsp;každém sloupci jsou právě dvě jedničky&nbsp;– indexy vrcholů, mezi kterými hrana vede. Zabírá však O(mn) a její použití bývá dost neohrabané, takže je většinou lepší dát přednost jiné reprezentaci grafu. Je ale dobré o&nbsp;ní vědět.</li></ul><p>Grafy jsou velmi široké téma. Můžeme hledat jejich minimální kostry, můžeme v&nbsp;nich hledat nejkratší cesty či skrze ně pouštět pod tlakem vodu. Více o&nbsp;nich si tedy můžete přečíst v&nbsp;některé z&nbsp;našich specializovaných grafových kuchařek, které odkazujeme z&nbsp;našeho <a href=\"https://ksp.mff.cuni.cz/kucharky/\">kuchařkového rozcestníku</a>.</p>",
            "position": [
                -120.2343978881836,
                521.4607124328613
            ]
        },
        {
            "id": "kucharka-zakladni-hladovy-algoritmus",
            "type": "text",
            "comment": "https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/",
            "requires": [
                "kucharka-zakladni-algoritmus"
            ],
            "title": "Hladové algoritmy",
            "htmlContent": "<h3>Hladové algoritmy</h3><p>Věřte nebo ne, ale i&nbsp;počítač se někdy cítí hladový. Po namáhavé práci mu můžeme dopřát to potěšení, aby si ukousl co největší kus dat. A&nbsp;ukážeme, že někdy je to i&nbsp;ku prospěchu. Řeč bude o&nbsp;<i>hladových algoritmech</i>.</p><p>Takovými algoritmy rozumíme ty, které hledají řešení celé úlohy po jednotlivých krocích a&nbsp;splňují následující dvě podmínky:</p><ul><li>V&nbsp;každém kroku zvolí lokálně nejlepší řešení.</li><li>Provedené rozhodnutí již nikdy neodvolává (tedy nebacktrackuje).</li></ul><p>Lokálně nejlepší řešení je takové, které v&nbsp;aktuálním kroku vybere tu možnost, která nám na tomto místě nejvíce pomůže (bez jakéhokoliv ohledu na globální stav). Může to být třeba nejvyšší hodnota, nebo nejkratší cesta v&nbsp;grafu.</p><p>Pokud ale od hladového algoritmu chceme, aby nám našel globálně nejlepší řešení, musí naše úloha splnit předpoklad, že si výběrem lokálně nejlepšího řešení nezhoršíme to globální. Tento předpoklad se nedá formulovat obecně a&nbsp;je nutné se nad ním zamyslet zvlášť u&nbsp;každé úlohy.</p><h4>Příklady hladových algoritmů</h4><p>První hladovou úlohou bude (jak jinak) automat na jídlo vracející mince. Automat by měl vracet peníze nazpět tak, aby vrátil daný obnos v&nbsp;co možná nejmenším počtu mincí. Pro náš měnový systém (máme mince hodnot 1, 2, 5, 10, 20 a&nbsp;50 Kč) lze tuto úlohu řešit hladovým algoritmem&nbsp;– v&nbsp;každém kroku algoritmu vrátíme tu největší minci, kterou můžeme (tedy pro vrácení 42 Kč to bude 42 = 20 + 20 +2 Kč).</p><p>Měnové systémy většiny států jsou postavené tak, aby fungovaly takto pěkně, neplatí to ale obecně. Zkusme si vrátit 42 Kč, pokud bychom měli jen mince hodnoty 20, 10 a&nbsp;4 Kč. Správným řešením je 42 = 20 + 10 + 4 + 4 +4 Kč, hladový algoritmus by ale zkusil vrátit 42 = 20 + 20 + … a&nbsp;tady by selhal.</p><p>Dále se velmi často dají hladovým algoritmem řešit nějaké úlohy přidávání nebo odebírání skupin prvků. Typickým příkladem je třeba rozvržení naplánovaných přednášek do učeben. Seřadíme si začátky přednášek podle času a&nbsp;postupně bereme jednu za druhou a&nbsp;umísťujeme je do volných učeben s&nbsp;nejnižším číslem.</p><p>Tím jsme si určitě nic nerozbili, protože v&nbsp;nějaké učebně přednáška být musí. Určitě budeme potřebovat tolik učeben, kolik je maximálně přednášek v&nbsp;jeden čas, a&nbsp;díky tomu si umístěním přednášky do nějaké učebny nezablokujeme místo pro jinou přednášku, jelikož nám vždy zbude dostatek volných učeben.</p><p>Kdybychom ale naopak měli pevně zadaný počet učeben a&nbsp;chtěli jsme do nich umístit co možná nejvíce přednášek, nejedná se již o&nbsp;úlohu řešitelnou hladovým algoritmem, v&nbsp;takovém případě je potřeba zvolit nějaký chytřejší postup.</p>",
            "position": [
                -387.1890754699707,
                107.66755294799805
            ]
        },
        {
            "id": "kucharka-zakladni-knihovny",
            "type": "text",
            "comment": "https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/",
            "requires": [
                "kucharka-zakladni-fronta-a-zasobnik"
            ],
            "title": "Knihovny",
            "htmlContent": "<h4>Knihovny</h4><p>Tyto základní struktury už jsou často předpřipravené jako součást určitých <i>knihoven</i> v&nbsp;daném jazyce. Knihovna je většinou sbírka nějakých navzájem souvisejících funkcí, které již někdo sepsal a&nbsp;které si můžeme do našeho programu načíst a&nbsp;používat. Ukázku načtení knihoven můžete vidět například ve výše zmíněném kódu v&nbsp;jazyce&nbsp;C.</p><p>Je ale velmi důležité rozumět tomu, jak knihovní funkce vnitřně fungují. Protože jedině když budeme vědět, co je jak rychlé a&nbsp;efektivní, budeme schopni psát rychlé programy.</p><p>Teď již víme, jak reprezentovat nejzákladnější datové struktury v&nbsp;počítači, ale mohlo by se nám hodit zastavit se ještě chvíli u&nbsp;dalších struktur. Tentokrát je už budeme studovat trochu teoretičtěji.</p>",
            "position": [
                -122.4397964477539,
                435.2399787902832
            ]
        },
        {
            "id": "kucharka-zakladni-pole",
            "type": "text",
            "comment": "https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/",
            "requires": [
                "kucharka-zakladni-reprezentace-dat"
            ],
            "title": "Pole",
            "htmlContent": "<p>První datovou strukturou, kterou si představíme a&nbsp;která se na výše nastíněnou situaci náramně hodí, je <i>pole</i>. To představuje spoustu přihrádek (proměnných) naskládaných v&nbsp;paměti za sebou, ke kterým typicky přistupujeme přes jeden společný název pole a&nbsp;jejich pořadové číslo neboli index (jako NazevPole[0], NazevPole[1], …). (Pozor, ve světě počítačů se velmi často indexuje od nuly, tedy první prvek má v&nbsp;tomto případě index 0.)</p><p>Ve většině základních jazyků je pole jen <i>statické</i>, tedy v&nbsp;okamžiku jeho vytváření musíme počítači říct, jak ho chceme velké. Některé vyšší jazyky ale nabízejí i&nbsp;pole, které se dynamicky zvětšuje, takovou konstrukci si ukážeme ve druhé části kuchařky.</p><p>Abychom nebyli omezeni jen jedním rozměrem, můžeme si klidně vyrobit pole dvourozměrné (případně obecně n-rozměrné). Dvourozměrné pole je vlastně tabulka hodnot, nazýváme ji také někdy <i>matice</i>, a&nbsp;může se nám hodit například při reprezentaci různých map (plán bludiště) nebo, jak uvidíme níže, pro reprezentaci dalších datových struktur.</p><p>U&nbsp;pole již má smysl přemýšlet, jak dlouho bude která operace trvat. Díky tomu, že jsou jednotlivé prvky v&nbsp;poli naskládané pevně za sebou, je snadné spočítat umístění konkrétní přihrádky. Proto když se počítače zeptáme na obsah přihrády pole[42], vrátí nám hodnotu ihned.</p><figure class=\"image\"><img src=\"https://ksp.mff.cuni.cz/img/hippo_array.png\" alt=\"Pole\"></figure><p>Tomu budeme říkat <i>operace v&nbsp;konstantním čase</i> a&nbsp;budeme značit, že trvá čas&nbsp;O(1). Efektivitu programu totiž nepočítáme v&nbsp;sekundách (protože každý z&nbsp;nás má asi jinak rychlý počítač), ale v&nbsp;počtu základních operací, které musí program řádově vykonat. Více o&nbsp;časové složitosti si můžete přečíst v&nbsp;<a href=\"https://ksp.mff.cuni.cz/viz/kucharky/slozitost\">kuchařce o&nbsp;složitosti</a>, nejdříve však doporučujeme dočíst tuto kuchařku.</p><p>Přidání nového prvku na konec pole také zvládneme v&nbsp;konstantním čase. Problém je přidání nového prvku někam doprostřed (což se nám typicky stane, pokud budeme chtít udržovat hodnoty v&nbsp;poli seřazené a&nbsp;zároveň do něj vkládat nové). V&nbsp;takovém případě se totiž všechny prvky za vkládaným musí posunout o&nbsp;jednu pozici dál, aby se vkládaný prvek vešel na své místo. Taková operace tedy může pro pole délky N (čili pole obsahující N prvků) trvat řádově až N kroků, což zapisujeme jako O(N) a&nbsp;říkáme, že je to vzhledem k&nbsp;N <i>lineární časová složitost</i>.</p><p>To je značná nevýhoda oproti struktuře, kterou si ukážeme za chvíli. Určitě ale pole nezavrhujme. Je to základní datová struktura, která nalezne použití ve spoustě programů, a&nbsp;jak si ve druhé části kuchařky ukážeme, můžeme ho použít třeba k&nbsp;rychlému hledání hodnoty metodou <i>binárního vyhledávání</i>. Nyní ale již slibovaná další datová struktura.</p>",
            "position": [
                -120.71669006347656,
                195.84718704223633
            ]
        },
        {
            "id": "kucharka-zakladni-prefixove-soucty",
            "type": "text",
            "comment": "https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/",
            "requires": [
                "kucharka-zakladni-pole"
            ],
            "title": "Prefixové součty",
            "htmlContent": "<h4>Prefixové součty</h4><p>Velmi často se nám hodí si ještě před samotným výpočtem předpočítat a&nbsp;uložit nějaké hodnoty, které poté použijeme.</p><p>Představme si například problém nalezení souvislého úseku s&nbsp;největším součtem v&nbsp;nějaké posloupnosti kladných i&nbsp;záporných čísel. Že to není úplně jednoduchý příklad, si ukažme na následující posloupnosti:</p><p>1,-2,4,5,-1,-5,2,7</p><p>Máme zde dvě ryze kladné souvislé posloupnosti, každou se součtem 9 (4,5 a&nbsp;2,7). Ale přesto je výhodnější vzít i&nbsp;nějaké záporné hodnoty a&nbsp;vytvořit tak souvislou posloupnost o&nbsp;součtu 12 (zkuste ji nalézt).</p><p>Mohlo by nás napadnout, že prostě zkusíme vzít všechny možné začátky a&nbsp;všechny možné konce. To nám dává O(n2) možných posloupností (máme n&nbsp;možných začátků a&nbsp;ke každému z&nbsp;nich řádově n&nbsp;možných konců), pro každou posloupnost si spočteme součet (to zvládneme v&nbsp;O(n)) a&nbsp;budeme si pamatovat ten největší nalezený. Celý náš postup tak trvá O(n3).</p><p>To není pro takhle jednoduchou úlohu zrovna ten nejpěknější čas, zkusme ho zlepšit. Ukážeme si, jak vypočítat součet libovolné posloupnosti v&nbsp;konstantním čase. Celý princip je vlastně až kouzelně jednoduchý, ale zároveň velmi mocný. Na začátku výpočtu si do pomocného pole P stejné délky jako posloupnost na vstupu (té říkejme S) uložíme takzvané <i>prefixové součty:</i> i-tý prefixový součet je součet prvních i+1 prvků&nbsp;S, neboli P[i] = S[0] + S[1] + … + S[i].</p><p>Pro náš ukázkový případ a&nbsp;pro vstupní pole označené S by to dopadlo takto:</p><figure class=\"table\"><table><tbody><tr><td>i</td><td>-1</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr><tr><td>S[i]</td><td>&nbsp;</td><td>1</td><td>-2</td><td>4</td><td>5</td><td>-1</td><td>-5</td><td>2</td><td>7</td></tr><tr><td>P[i]</td><td>0</td><td>1</td><td>-1</td><td>3</td><td>8</td><td>7</td><td>2</td><td>4</td><td>11</td></tr></tbody></table></figure><p>Pole prefixových součtů umíme získat v&nbsp;linerárním čase&nbsp;– prostě jen od začátku procházíme vstupní pole, počítáme si průběžný součet a&nbsp;ten zapisujeme.</p><p>Součet libovolného úseku a…b pak získáme v&nbsp;konstantním čase jako prefixový součet od začátku do indexu&nbsp;b minus prefixový součet od začátku do indexu&nbsp;a. Zapsáno programově to pak je:</p><p>soucet = P[b] - P[a-1]; To nám umožňuje snížit čas potřebný na řešení této úlohy na O(n2). To je už lepší čas; prozradíme však, že tuto úlohu lze řešit dokonce v&nbsp;lineárním čase, ale to je již nad rámec této kuchařky.</p><h4>&nbsp;</h4>",
            "position": [
                -378.9069938659668,
                351.9900817871094
            ]
        },
        {
            "id": "kucharka-zakladni-prefixove-soucty-2d",
            "type": "text",
            "comment": "https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/",
            "requires": [
                "kucharka-zakladni-prefixove-soucty"
            ],
            "title": "Dvourozměrné prefixové součty",
            "htmlContent": "<h4>Dvourozměrné prefixové součty</h4><p>Prefixové součty se dají zobecnit i&nbsp;do více rozměrů, ale princip je vždy stejný. Například dvourozměrné prefixové součty u&nbsp;matice fungují tak, že si předpočítáme součty podmatic začínajících levým vrchním políčkem a&nbsp;končící na indexu [x,y].</p><p>Z&nbsp;toho je vidět, že prefixový součet zpravidla obsadí stejně velký prostor jako původní data, v&nbsp;tomto případě tedy budeme mít matici hodnot prefixových součtů končících na zadaných souřadnicích. Jak ale získat součet nějaké podmatice, která se nachází někde „uprostřed“ naší matice?</p><p>Použijeme stejný princip jako u&nbsp;jednorozměrného případu: Přičteme větší část, kterou chceme započítat, a&nbsp;odečteme od ní části, které započítat nechceme. Pro případ podmatice začínající vlevo nahoře na pozici [x,y] a&nbsp;končící napravo dole na [X,Y] to ilustruje následující obrázek:</p><figure class=\"image\"><img src=\"https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/zakladni_algoritmy-6.png\" alt=\"Dvourozměrné prefixové součty\"></figure><p>Nejdříve přičteme celý prefixový součet končící na pozici [X,Y]. Tím jsme ale započítali i&nbsp;části A, B a&nbsp;C z&nbsp;obrázku, které započítat nechceme. Tak odečteme prefixové součty končící na indexech [X,y] a&nbsp;[x,Y]. Ale pozor, teď jsme odečetli jednou A+B a&nbsp;jednou A+C, tedy část&nbsp;A (prefixový součet končící na pozici [x,y]) jsme odečetli dvakrát, musíme ji proto ještě jednou přičíst.</p><p>Celý vzorec tedy vypadá takto:</p><p>soucet = P[X,Y] - P[X,y] - P[x,Y] + P[x,y];</p><p>Tento princip přičítání a odečítání se dá zobecnit i&nbsp;pro libovolné vyšší rozměry, ale chce to již trošku představivosti, co se má přičíst a&nbsp;kolikrát. Říká se tomu také <i>princip inkluze a&nbsp;exkluze</i> a&nbsp;najde použití nejen u&nbsp;vícerozměrných prefixových součtů.</p>",
            "position": [
                -438.9523277282715,
                490.7156219482422
            ]
        },
        {
            "id": "kucharka-zakladni-reprezentace-dat",
            "type": "text",
            "comment": "https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/",
            "requires": [
                "kucharka-zakladni-algoritmus"
            ],
            "title": "Reprezentace dat",
            "htmlContent": "<h3>Reprezentace dat v&nbsp;počítači</h3><p>Celkem často si v&nbsp;průběhu výpočtu našeho algoritmu potřebujeme pamatovat nějaké hodnoty. K&nbsp;tomu nám programovací jazyky dávají nástroj s&nbsp;názvem <i>proměnná</i>. Ta představuje jakési pojmenované místo v&nbsp;paměti (přihrádku), do kterého si můžeme data ukládat a&nbsp;pak je odtud zase načítat.</p><p>Typickým příkladem může být počítání součtu čísel, která nám uživatel zadá na vstupu. Na začátku nejdříve do nějakého místa v&nbsp;paměti uložíme hodnotu&nbsp;0. Poté postupně, jak nám uživatel zadává čísla, tuto proměnnou pokaždé přečteme, k&nbsp;její hodnotě přičteme nově zadané číslo a&nbsp;výsledek opět uložíme na stejné místo.</p><p>Takovéto použití jedné proměnné je velmi jednoduché (tak jednoduché, že ho takto podrobně do řešení KSPčka nepište, není to potřeba), ale také celkem omezené. Co kdybychom si chtěli pamatovat třeba celou zadanou posloupnost čísel? Mohlo by nám stačit vyrobit si spoustu různě pojmenovaných proměnných, ale nejde to lépe? Jde.</p><p>Jednotlivé proměnné se mohou kombinovat do složitějších konstrukcí, které obecně nazýváme <i>datovými strukturami</i>. Zkusíme si ty nejzákladnější představit.</p>",
            "position": [
                -117.82666397094727,
                108.65406799316406
            ]
        },
        {
            "id": "kucharka-zakladni-spojovy-seznam",
            "type": "text",
            "comment": "https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/",
            "requires": [
                "kucharka-zakladni-pole"
            ],
            "title": "Spojový seznam",
            "htmlContent": "<h4>Spojový seznam a&nbsp;ukazatele</h4><p>Pole jsme měli v&nbsp;paměti určené jenom tím, že počítač věděl, kde je jeho začátek a&nbsp;kolik místa v&nbsp;paměti zabírají jeho prvky. Při dotazování na konkrétní index pak podle indexu a&nbsp;podle velikosti prvků počítač přesně věděl, kam do paměti se má podívat, aby našel námi požadovaný prvek (to vše zvládl v&nbsp;konstantním čase). Jednotlivé prvky si tedy vůbec nemusely pamatovat, kde se nachází jejich sousedi, protože všechny prvky seděly v&nbsp;paměti za sebou.</p><p>Představme si ale teď situaci, kdy by si každý prvek ještě pamatoval pozice sousedů. Pak bychom mohli mít prvky libovolně rozházené v&nbsp;paměti a&nbsp;jen by se na sebe vzájemně odkazovaly (první prvek by tvrdil, že druhý je na pozici X, druhý by tvrdil, že třetí je na pozici Y, a&nbsp;tak dále).</p><figure class=\"image\"><img src=\"https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/zakladni_algoritmy-1.png\" alt=\"Spojový seznam\"></figure><p>K&nbsp;lepšímu pochopení tohoto principu je důležité si vysvětlit, co to je <i>ukazatel</i> (nebo také <i>odkaz</i> či anglicky <i>pointer</i>). Každé místo v paměti počítače má své číselné označení, kterému říkáme <i>adresa</i>. Když si vytváříme nějakou pojmenovanou proměnnou, ta se vlastně odkazuje na určité místo v&nbsp;paměti a&nbsp;na tomto místě v&nbsp;paměti je její hodnota.</p><p>Co kdyby ale hodnota proměnné byla adresa nějakého jiného místa v&nbsp;paměti? Pak takové proměnné říkáme <i>pointer</i> a&nbsp;umožňuje nám vytvářet výše popsanou strukturu rozházených prvků v&nbsp;paměti.</p><p><i>Spojový seznam</i> je tedy určený svým prvním prvkem (máme v&nbsp;jedné proměnné pointer na tento prvek, který se často nazývá <i>kořen</i>, protože z&nbsp;něj „vyrůstá“ zbytek struktury) a&nbsp;poté u&nbsp;každého dalšího prvku máme za sebou uloženou hodnotu tohoto prvku a&nbsp;odkaz (pointer) na další prvek. Odkazy mezi prvky mohou být i&nbsp;obousměrné, mohou vést dokola (poslední ukazuje na první) či mohou dokonce tvořit nějakou složitější strukturu (pak to ale již nebude čistý spojový seznam).</p><p>Pokud pointer nemá nikam ukazovat, realizuje se to odkázáním tohoto pointeru na adresu NULL. To skoro doslovně říká „Neukazuji nikam“.</p><figure class=\"image\"><img src=\"https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/zakladni_algoritmy-2.png\" alt=\"Obousměrný cyklický spojový seznam\"></figure><p>Co nám takto vystavěná struktura umožňuje v&nbsp;porovnání s&nbsp;polem? Přístup na konkrétní prvek v&nbsp;ní stojí lineárně času, protože ho musíme „odkrokovat“ od prvního prvku (na který máme pointer), tedy musíme udělat až O(N) kroků. Pokud bychom však pointer na daný prvek už nějak měli, samozřejmě na něj můžeme přistoupit v&nbsp;konstantním čase.</p><p>Naopak přidávání prvků na konkrétní místo (i&nbsp;jejich odebírání) máme v&nbsp;podstatě zadarmo a&nbsp;spojový seznam můžeme rozšiřovat, dokud na něj máme v&nbsp;počítači paměť. Ve chvíli, kdy chceme přidat nový prvek za prvek, na který máme pointer, jen šikovně přepojíme ukazatele. Pokud předtím ukazatele vedly A→B, teď povedou A →C →B (a&nbsp;při odebírání naopak).</p>",
            "position": [
                -126.44880676269531,
                270.6037178039551
            ]
        },
        {
            "id": "kucharka-zakladni-stromy",
            "type": "text",
            "comment": "https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/",
            "requires": [
                "kucharka-zakladni-grafy"
            ],
            "title": "Stromy",
            "htmlContent": "<h4>Stromy</h4><p>Možná si říkáte, co má informatika u&nbsp;všech elektronů společného s&nbsp;lesnictvím? Kupodivu celkem mnoho a&nbsp;bez stromů bychom se v&nbsp;leckterém případě jen těžko obešli. Informatické stromy sice nejsou většinou tak zelené, mají ale, na rozdíl od svých dřevnatých sourozenců, mnoho jiných pěkných vlastností.</p><p>Strom je vlastně speciálním případem souvislého grafu, který neobsahuje žádnou kružnici (cyklus). To znamená, že mezi každými dvěma vrcholy stromu existuje právě jedna cesta.</p><p>Díky této vlastnosti můžeme nějaký zvolený vrchol prohlásit za <i>kořen</i> a&nbsp;strom za něj pomyslně zavěsit (tak, že strom roste od kořene směrem dolů), této operaci se říká <i>zakořenění</i>. Pak můžeme mluvit o&nbsp;tom, že z&nbsp;kořene směrem dolů (informatické stromy mají tradičně kořen nahoře) vyrůstají nějaké <i>podstromy</i>.</p><figure class=\"image\"><img src=\"https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/zakladni_algoritmy-4.png\" alt=\"Strom\"></figure><p>Pokud je strom zakořeněný, můžeme v&nbsp;něm mluvit o&nbsp;<i>hloubce</i> každého vrcholu, neboli o&nbsp;jeho vzdálenosti od kořene. Hloubka celého stromu je pak nejdelší ze vzdáleností od kořene k&nbsp;nějakému z&nbsp;<i>listů</i> (tak říkáme vrcholům, které již nemají žádné <i>syny</i>, tedy vrcholy, které by z&nbsp;nich vyrůstaly). Podle hloubky poté můžeme vrcholy stromu uspořádat do jednotlivých <i>hladin</i>.</p><p>Velmi často používáme stromy, které jsou nějak pravidelné. Příkladem jsou třeba <i>binární stromy</i>, které mají v&nbsp;každém vrcholu maximálně dva syny (říkáme jim <i>levý a&nbsp;pravý podstrom</i>). Reprezentovat se dají buď obecně jako každý jiný strom (v&nbsp;každém vrcholu spojový seznam podstromů), nebo velmi pěkně i&nbsp;v&nbsp;poli.</p><p>Stačí si pomyslně doplnit binární strom na <i>úplný</i> (to je takový, který má všechny své hladiny plné) a pak ho od kořene směrem dolů po hladinách očíslovat (kořen dostane číslo nula, jeho synové čísla jedna a dva, další hladina čísla tři až šest, atd.).</p><p>Můžeme si všimnout, že pokud si v&nbsp;takovém očíslování vezmeme jakýkoliv vrchol s&nbsp;číslem (indexem) i, jeho synové jsou právě vrcholy s&nbsp;indexy 2i+1 a&nbsp;2i+2. Do pole níže je zapsaný binární strom z&nbsp;obrázku výše.</p><figure class=\"table\"><table><tbody><tr><td>index</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>10</td></tr><tr><td>hodnota</td><td>8</td><td>3</td><td>12</td><td>1</td><td>5</td><td>9</td><td>14</td><td>-</td><td>-</td><td>4</td><td>7</td></tr></tbody></table></figure><p>Jak plyne z&nbsp;očíslování, pro úplný binární strom je uložení v&nbsp;poli efektivní a neplýtváme místem. Pokud ale strom úplný nebude, zůstanou nám v&nbsp;poli volná místa. Uložení v&nbsp;poli se tedy vyplatí jen pro stromy, které se od úplných příliš neliší.</p><p>Speciálním případem binárních stromů jsou pak ještě <i>binární vyhledávací stromy</i>. Jsou to normální binární stromy, pro něž navíc platí, že ať si vezmeme libovolný vrchol, budou hodnoty vrcholů v&nbsp;jeho levém podstromu menší než hodnota tohoto vrcholu a&nbsp;hodnoty v&nbsp;jeho pravém podstromu naopak větší.</p><p>V&nbsp;takovém stromu pak zvládneme snadno vyhledávat. Budeme ho postupně procházet od kořene a v&nbsp;jednotlivých vrcholech budeme porovnávat hledanou a aktuální hodnotu a podle toho sestupovat do správného podstromu. Podobná technika je detailněji popsaná ve druhé části kuchařky, v&nbsp;sekci <i>Rozděl a panuj</i>.</p><p>Na složitější datové struktury stavějící na těchto základních (haldy, intervalové stromy,&nbsp;…) se můžete podívat do některé z&nbsp;našich dalších kuchařek, na jejichž přehled jsme vás už odkázali o&nbsp;kapitolu výše.</p>",
            "position": [
                -119.87232208251953,
                625.2082099914551
            ]
        },
        {
            "id": "label_matematicke",
            "type": "label",
            "comment": "...",
            "requires": [],
            "title": "Potřeba matematického pohledu",
            "position": [
                1671.7270526885986,
                2.2010104656219482
            ]
        },
        {
            "id": "label-1d-pole",
            "type": "label",
            "comment": "...",
            "requires": [],
            "title": "Pole",
            "rotationAngle": 337,
            "position": [
                -841.598030090332,
                1030.576644897461
            ]
        },
        {
            "id": "label-2d-pole",
            "type": "label",
            "comment": "...",
            "requires": [],
            "title": "2D pole",
            "rotationAngle": 340,
            "position": [
                -904.0786743164062,
                485.8621520996094
            ]
        },
        {
            "id": "label-grafy",
            "type": "label",
            "comment": "...",
            "requires": [],
            "title": "Grafy",
            "rotationAngle": 342,
            "position": [
                -1560.4506225585938,
                -15.361473083496094
            ]
        },
        {
            "id": "label-grafy-pracovni-poznamka",
            "type": "text",
            "comment": "Chtělo by to grafy celé nějak přeuspořádat. Je to přeci jen dost široké téma.",
            "requires": [
                "31-Z3-3"
            ],
            "title": "Grafy, ale neuspořádané",
            "htmlContent": "<p>undefined</p>",
            "position": [
                -1597.372802734375,
                129.89034271240234
            ]
        },
        {
            "id": "label-retezce",
            "type": "label",
            "comment": "...",
            "requires": [],
            "title": "Textové řetězce",
            "rotationAngle": 326,
            "position": [
                -523.4024200439453,
                -451.524658203125
            ]
        },
        {
            "id": "label-trizeni",
            "type": "label",
            "comment": "",
            "requires": [],
            "title": "Třídění",
            "position": [
                -473.98663330078125,
                1377.7706861495972
            ]
        },
        {
            "id": "label-uvod",
            "type": "label",
            "comment": "...",
            "requires": [],
            "title": "Úvod",
            "position": [
                -3.4084014892578125,
                -206.00055694580078
            ]
        },
        {
            "id": "label-vaskuv-pokus-o-kecy",
            "type": "label",
            "comment": "...",
            "requires": [],
            "title": "Vaškův pokus o kecy",
            "position": [
                -695.6980514526367,
                -966.9375038146973
            ]
        },
        {
            "id": "label-zelvy",
            "type": "label",
            "comment": "...",
            "requires": [],
            "title": "Želvy",
            "rotationAngle": 43,
            "position": [
                587.7714233398438,
                399.8365783691406
            ]
        },
        {
            "id": "placeholder-kurz-programovani",
            "type": "text",
            "comment": "...",
            "requires": [
                "programovani"
            ],
            "title": "Placeholder pro základní kurz programování",
            "htmlContent": "<p>Tady by měl začítat kurz programování. Chceme ze stávajícího kurzu vybrat úlohy a dát je sem. Postupně by asi také bylo fajn to celé rozvinou do větších detailů.</p>",
            "position": [
                271.81773376464844,
                81.61006927490234
            ]
        },
        {
            "id": "programovani",
            "type": "text",
            "comment": "...",
            "requires": [
                "jak-resit-ulohy"
            ],
            "title": "Programování",
            "htmlContent": "<p>Počítače nemluví lidskou řečí. Aspoň zatím. Pokud jim chceme vysvětlit nějaký komplikovanější problém, potřebujeme mluvit správnou řečí - nějakým <strong>programovacím jazykem.</strong></p><h2>Jaký programovací jazyk použít?</h2><p>Programovacích jazyků je více a každý se hodí na něco jiného. S roustoucími zkušenostmi se pravděpodobně naučíš přecházet mezi několika programovacími jazyky podle toho, jaký problém zrovna řešíš.</p><p>Pro řešení úloh Ti doporučujeme <strong>Python 3</strong>. Pokud se ho chceš naučit, můžeš zkusit projít kurzem, který jsme pro Tebe připravili.</p>",
            "position": [
                124.60416412353516,
                9.242716312408447
            ]
        },
        {
            "id": "start",
            "type": "text",
            "requires": [
                "label-uvod"
            ],
            "comment": "úvodní kecy o tom, jak to celé funguje",
            "title": "Start",
            "htmlContent": "<p>Aktuálně je celý projekt v <strong>BETA režimu</strong>. Pokud najdeš libovolnou chybu nebo pokud Tě napadá, že by se dalo cokoliv vylepšit (a ideálně jak), dej prosím vědět Vaškovi a Standovi. Díky!</p><h2>Vítej v našem novém kurzu!</h2><p>Pokud tě napadá, jak by se tento <strong>projekt mohl jmenovat</strong>, dej nám vědět!</p><h3>Co zde (časem) najdeš?</h3><ul><li>Základní kurz programování (dříve byl samostatně)</li><li>Roztříděné úlohy ze starších ročníků a sérií</li><li>Staré seriály</li><li>…a další úlohy, které jsme odněkud vyhrabali nebo nově vyrobili</li></ul><h3>Co budu mít z toho, že budu úlohy zde řešit?</h3><p>Něco se můžeš naučit a z toho můžeš mít dobrý pocit. Nic jiného teď neslibujeme. Splnit zde úlohu je to samé jako splnit ji ve cvičišti. Navíc ono k úlohám jsou většinou přístupná vzorová řešení, takže soutěžit zde nedává moc smysl.</p><p>Ohledně vzorových řešení – je čistě na Tobě, zda budeš úlohy řešit poctivě, nebo jestli si budeš číst řešení před tím, než vymyslíš něco vlastního. Zabránit Ti v tom nedokážeme a ani nechceme. Pokud se chceš něco naučit, nebo si něco procvičit, tak doporučujeme vzorová řešení otevírat až po vlastním řešení, případně když se zasekneš. Získáš tak z kurzu nejvíce.</p>",
            "position": [
                -1.7545125484466553,
                -144.6544418334961
            ]
        }
    ],
    "clusters": {
        "Triviální výpočet": [
            "31-Z1-1"
        ],
        "Triviální průchod 1D pole": [
            "26-Z1-1"
        ],
        "Triviální průchody 2D pole": [
            "26-Z1-2",
            "26-Z4-3",
            "29-Z3-1",
            "31-Z1-4"
        ],
        "Želvy": [
            "29-Z1-1",
            "29-Z2-1",
            "29-Z4-3"
        ],
        "Komplexnější práce s poli": [
            "26-Z2-4",
            "29-Z1-3"
        ],
        "Práce s čísly": [
            "26-Z2-2",
            "26-Z3-3",
            "26-Z4-1"
        ],
        "Práce s řetězci": [
            "26-Z1-3",
            "26-Z2-3",
            "26-Z3-2",
            "29-Z3-2"
        ],
        "Grafy": [
            "26-Z1-4",
            "26-Z3-4",
            "26-Z4-4",
            "29-Z1-4",
            "31-Z1-2",
            "31-Z3-2",
            "31-Z3-3"
        ],
        "Voser": [
            "26-Z3-1",
            "29-Z3-3"
        ],
        "Nápad": [
            "26-Z4-2"
        ],
        "matematické": [
            "30-1-4"
        ]
    }
}